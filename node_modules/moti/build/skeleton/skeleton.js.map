{"version":3,"file":"skeleton.js","sourceRoot":"","sources":["../../src/skeleton/skeleton.tsx"],"names":[],"mappings":"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","sourcesContent":["import { LinearGradient } from 'expo-linear-gradient'\nimport React, { useState, createContext, useContext } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nimport { View as MotiView } from '../components'\nimport { AnimatePresence, MotiTransitionProp } from '../core'\nimport {\n  DEFAULT_SKELETON_SIZE as DEFAULT_SIZE,\n  defaultDarkColors,\n  defaultLightColors,\n  baseColors,\n} from './shared'\nimport { MotiSkeletonProps } from './types'\n\nexport default function Skeleton(props: MotiSkeletonProps) {\n  const skeletonGroupContext = useContext(SkeletonGroupContext)\n  const {\n    radius = 8,\n    children,\n    show = skeletonGroupContext ?? !children,\n    width,\n    height = children ? undefined : DEFAULT_SIZE,\n    boxHeight,\n    colorMode = 'dark',\n    colors = colorMode === 'dark' ? defaultDarkColors : defaultLightColors,\n    backgroundColor = colors[0] ??\n      colors[1] ??\n      baseColors[colorMode]?.secondary,\n    backgroundSize = 6,\n    disableExitAnimation,\n    transition,\n  } = props\n\n  const [measuredWidth, setMeasuredWidth] = useState(0)\n\n  const getBorderRadius = () => {\n    if (radius === 'square') {\n      return 0\n    }\n    if (radius === 'round') {\n      return 99999\n    }\n    return radius\n  }\n\n  const borderRadius = getBorderRadius()\n\n  const getOuterHeight = () => {\n    if (boxHeight != null) return boxHeight\n    if (show && !children) {\n      return height\n    }\n    return undefined\n  }\n\n  const outerHeight = getOuterHeight()\n\n  return (\n    <View\n      style={{\n        height: outerHeight,\n        minHeight: height,\n        minWidth: width ?? (children ? undefined : DEFAULT_SIZE),\n      }}\n    >\n      {children}\n      <AnimatePresence>\n        {show && (\n          <MotiView\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              borderRadius,\n              width: width ?? (children ? '100%' : DEFAULT_SIZE),\n              height: height ?? '100%',\n              overflow: 'hidden',\n            }}\n            animate={{\n              backgroundColor,\n              opacity: 1,\n            }}\n            transition={{\n              type: 'timing',\n            }}\n            exit={\n              !disableExitAnimation && {\n                opacity: 0,\n              }\n            }\n            onLayout={({ nativeEvent }) => {\n              if (measuredWidth === nativeEvent.layout.width) return\n\n              setMeasuredWidth(nativeEvent.layout.width)\n            }}\n            pointerEvents=\"none\"\n          >\n            <AnimatedGradient\n              // force a key change to make the loop animation re-mount\n              key={`${JSON.stringify(colors)}-${measuredWidth}-${JSON.stringify(\n                transition || null\n              )}`}\n              colors={colors}\n              backgroundSize={backgroundSize}\n              measuredWidth={measuredWidth}\n              transition={transition}\n            />\n          </MotiView>\n        )}\n      </AnimatePresence>\n    </View>\n  )\n}\n\nconst AnimatedGradient = React.memo(\n  function AnimatedGradient({\n    measuredWidth,\n    colors,\n    backgroundSize,\n    transition = {},\n  }: {\n    measuredWidth: number\n    colors: string[]\n    backgroundSize: number\n    transition?: MotiTransitionProp\n  }) {\n    return (\n      <MotiView\n        style={StyleSheet.absoluteFillObject}\n        from={{ opacity: 0 }}\n        transition={{\n          type: 'timing',\n          duration: 200,\n        }}\n        animate={\n          measuredWidth\n            ? {\n                opacity: 1,\n              }\n            : undefined\n        }\n      >\n        <MotiView\n          style={[\n            StyleSheet.absoluteFillObject,\n            {\n              width: measuredWidth * backgroundSize,\n            },\n          ]}\n          from={{\n            translateX: 0,\n          }}\n          animate={\n            measuredWidth\n              ? {\n                  translateX: -measuredWidth * (backgroundSize - 1),\n                }\n              : undefined\n          }\n          transition={{\n            loop: true,\n            delay: 200,\n            type: 'timing',\n            duration: 3000,\n            ...(transition as any),\n          }}\n        >\n          <LinearGradient\n            colors={colors}\n            start={{\n              x: 0.1,\n              y: 1,\n            }}\n            end={{\n              x: 1,\n              y: 1,\n            }}\n            style={StyleSheet.absoluteFillObject}\n          />\n        </MotiView>\n      </MotiView>\n    )\n  },\n  function propsAreEqual(prev, next) {\n    if (prev.measuredWidth !== next.measuredWidth) return false\n\n    if (prev.backgroundSize !== next.backgroundSize) return false\n\n    const didColorsChange = prev.colors.some((color, index) => {\n      return color !== next.colors[index]\n    })\n\n    if (didColorsChange) return false\n\n    // transition changes will not be respected, but it'll be in the key\n    return true\n  }\n)\n\nconst SkeletonGroupContext = createContext<boolean | undefined>(undefined)\n\nfunction SkeletonGroup({\n  children,\n  show,\n}: {\n  children: React.ReactNode\n  /**\n   * If `true`, all `Skeleton` children components will be shown.\n   *\n   * If `false`, the `Skeleton` children will be hidden.\n   */\n  show: boolean\n}) {\n  return (\n    <SkeletonGroupContext.Provider value={show}>\n      {children}\n    </SkeletonGroupContext.Provider>\n  )\n}\n\nSkeleton.Group = SkeletonGroup\n"]}