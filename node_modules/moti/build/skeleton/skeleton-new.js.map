{"version":3,"file":"skeleton-new.js","sourceRoot":"","sources":["../../src/skeleton/skeleton-new.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { createContext, useContext } from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport {\n  useAnimatedStyle,\n  useDerivedValue,\n  useSharedValue,\n} from 'react-native-reanimated'\nimport type Animated from 'react-native-reanimated'\n\nimport { View as MotiView } from '../components'\nimport { MotiTransitionProp } from '../core'\nimport {\n  DEFAULT_SKELETON_SIZE as DEFAULT_SIZE,\n  defaultDarkColors,\n  defaultLightColors,\n  baseColors,\n} from './shared'\nimport { MotiSkeletonProps } from './types'\n\nexport default function Skeleton(props: MotiSkeletonProps) {\n  const skeletonGroupContext = useContext(SkeletonGroupContext)\n  const {\n    radius = 8,\n    children,\n    show = skeletonGroupContext ?? !children,\n    width,\n    height = children ? undefined : DEFAULT_SIZE,\n    boxHeight,\n    colorMode = 'dark',\n    colors = colorMode === 'dark' ? defaultDarkColors : defaultLightColors,\n    backgroundColor = colors[0] ??\n      colors[1] ??\n      baseColors[colorMode]?.secondary,\n    backgroundSize = 6,\n    disableExitAnimation,\n    transition,\n  } = props\n\n  const measuredWidthSv = useSharedValue(0)\n\n  const borderRadius = (() => {\n    if (radius === 'square') {\n      return 0\n    }\n    if (radius === 'round') {\n      return 99999\n    }\n    return radius\n  })()\n\n  const outerHeight = (() => {\n    if (boxHeight != null) return boxHeight\n    if (show && !children) {\n      return height\n    }\n    return undefined\n  })()\n\n  return (\n    <View\n      style={{\n        height: outerHeight,\n        minHeight: height,\n        minWidth: width ?? (children ? undefined : DEFAULT_SIZE),\n      }}\n    >\n      {children}\n      <View\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          borderRadius,\n          width: width ?? (children ? '100%' : DEFAULT_SIZE),\n          height: height ?? '100%',\n          overflow: 'hidden',\n          backgroundColor: show ? backgroundColor : undefined,\n        }}\n        onLayout={({ nativeEvent }) => {\n          if (measuredWidthSv.value !== nativeEvent.layout.width) {\n            measuredWidthSv.value = nativeEvent.layout.width\n          }\n        }}\n        pointerEvents=\"none\"\n      >\n        {disableExitAnimation && !show ? null : (\n          <AnimatedGradient\n            // force a key change to make the loop animation re-mount\n            key={colors.join(',')}\n            colors={colors}\n            backgroundSize={backgroundSize}\n            transition={transition}\n            show={show}\n            measuredWidthSv={measuredWidthSv}\n            Gradient={props.Gradient}\n          />\n        )}\n      </View>\n    </View>\n  )\n}\n\nconst AnimatedGradient = React.memo(\n  function AnimatedGradient({\n    colors,\n    backgroundSize,\n    transition,\n    show,\n    measuredWidthSv,\n    Gradient,\n  }: {\n    colors: string[]\n    backgroundSize: number\n    transition?: MotiTransitionProp\n    show: boolean\n    measuredWidthSv: Animated.SharedValue<number>\n  } & Pick<MotiSkeletonProps, 'Gradient'>) {\n    return (\n      <MotiView\n        style={[\n          StyleSheet.absoluteFillObject,\n          useAnimatedStyle(\n            () => ({\n              width: measuredWidthSv.value * backgroundSize,\n            }),\n            [backgroundSize, measuredWidthSv]\n          ),\n        ]}\n        from={{\n          opacity: 0,\n          translateX: 0,\n        }}\n        animate={useDerivedValue(() => {\n          return {\n            opacity: show ? 1 : 0,\n            translateX: -measuredWidthSv.value * (backgroundSize - 1),\n          }\n        }, [measuredWidthSv, show])}\n        transition={{\n          translateX: {\n            type: 'timing',\n\n            loop: show,\n            delay: 200,\n            duration: 3000,\n          },\n          opacity: {\n            type: 'timing',\n            delay: 0,\n            duration: 200,\n          },\n          ...(transition as any),\n        }}\n      >\n        <Gradient\n          colors={colors}\n          start={{\n            x: 0.1,\n            y: 1,\n          }}\n          end={{\n            x: 1,\n            y: 1,\n          }}\n          style={StyleSheet.absoluteFillObject}\n        />\n      </MotiView>\n    )\n  },\n  function propsAreEqual(prev, next) {\n    if (prev.backgroundSize !== next.backgroundSize) return false\n\n    if (prev.show !== next.show) return false\n\n    const didColorsChange = prev.colors.some((color, index) => {\n      return color !== next.colors[index]\n    })\n\n    if (didColorsChange) return false\n\n    // transition changes will not be respected\n    return true\n  }\n)\n\nconst SkeletonGroupContext = createContext<boolean | undefined>(undefined)\n\nfunction SkeletonGroup({\n  children,\n  show,\n}: {\n  children: React.ReactNode\n  /**\n   * If `true`, all `Skeleton` children components will be shown.\n   *\n   * If `false`, the `Skeleton` children will be hidden.\n   */\n  show: boolean\n}) {\n  return (\n    <SkeletonGroupContext.Provider value={show}>\n      {children}\n    </SkeletonGroupContext.Provider>\n  )\n}\n\nSkeleton.Group = SkeletonGroup\n"]}