{"version":3,"file":"use-moti-pressable-animated-props.js","sourceRoot":"","sources":["../../../src/interactions/pressable/use-moti-pressable-animated-props.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,gBAAgB,EAAE,MAAM,yBAAyB,CAAA;AAC1D,OAAO,EAA+B,uBAAuB,EAAE,MAAM,WAAW,CAAA;AAChF,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAA;AAmBzD,MAAM,UAAU,6BAA6B,CAC3C,WAA+D,EAC/D,kBAA0C,EAC1C,SAAgB;IAEhB,MAAM,OAAO,GAAG,uBAAuB,EAAE,CAAA;IAEzC,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,UAAU,CACtC,+BAA+B,EAC/B,WAAW,EACX,kBAAkB,EAClB,SAAS,CACV,CAAA;IAED,OAAO,gBAAgB,CAAQ,GAAG,EAAE;QAClC,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;IAC7D,CAAC,EAAE,IAAI,CAAC,CAAA;AACV,CAAC","sourcesContent":["import type { MotiPressableInteractionState } from './types'\nimport { useAnimatedProps } from 'react-native-reanimated'\nimport { MotiPressableInteractionIds, useMotiPressableContext } from './context'\nimport { useFactory } from './use-validate-factory-or-id'\n\ntype Factory<Props> = (interaction: MotiPressableInteractionState) => Props\n\ntype Deps = unknown[] | null | undefined\n\n/**\n * Replacement for `useAnimatedProps`, which receives the interaction state as the first argument.\n * @param factory function that receives the interaction state and returns the props\n */\nexport function useMotiPressableAnimatedProps<Props>(\n  id: MotiPressableInteractionIds['id'],\n  factory: Factory<Props>,\n  deps?: Deps\n): Partial<Props>\nexport function useMotiPressableAnimatedProps<Props>(\n  factory: Factory<Props>,\n  deps?: Deps\n): Partial<Props>\nexport function useMotiPressableAnimatedProps<Props extends object>(\n  factoryOrId: Factory<Props> | MotiPressableInteractionIds['id'],\n  maybeFactoryOrDeps?: Factory<Props> | Deps,\n  maybeDeps?: Deps\n) {\n  const context = useMotiPressableContext()\n\n  const { factory, id, deps } = useFactory<Factory<Props>>(\n    'useMotiPressableAnimatedProps',\n    factoryOrId,\n    maybeFactoryOrDeps,\n    maybeDeps\n  )\n\n  return useAnimatedProps<Props>(() => {\n    return context ? factory(context.containers[id].value) : {}\n  }, deps)\n}\n"]}