{"version":3,"file":"use-validate-factory-or-id.js","sourceRoot":"","sources":["../../../src/interactions/pressable/use-validate-factory-or-id.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,wBAAwB,EAExB,uBAAuB,GACxB,MAAM,WAAW,CAAA;AAgBlB,MAAM,UAAU,UAAU,CACxB,QAAkB,EAClB,WAAwD,EACxD,kBAAmC,EACnC,SAAgB;IAEhB,MAAM,OAAO,GAAG,uBAAuB,EAAE,CAAA;IACzC,MAAM,cAAc,GAAG;;;EAGvB,QAAQ,KAAK,WAAW;;;;;;;;;;EAUxB,QAAQ;;;;;;;GAOP,CAAA;IAED,IAAI,OAAgB,CAAA;IACpB,IAAI,EAAE,GAAO,wBAAwB,CAAA;IACrC,IAAI,IAAU,CAAA;IAEd,IAAI,OAAO,WAAW,KAAK,UAAU,EAAE,CAAC;QACtC,OAAO,GAAG,WAAW,CAAA;QACrB,IAAI,GAAG,kBAA0B,CAAA;IACnC,CAAC;SAAM,IAAI,OAAO,kBAAkB,KAAK,UAAU,EAAE,CAAC;QACpD,EAAE,GAAG,WAAW,CAAA;QAChB,OAAO,GAAG,kBAAkB,CAAA;QAC5B,IAAI,GAAG,SAAS,CAAA;IAClB,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CACb,IAAI,QAAQ,2MAA2M,WAAW,2BAA2B,kBAAkB,qBAAqB;YAClS,cAAc,CACjB,CAAA;IACH,CAAC;IAED,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CACX,IAAI,QAAQ,+FAA+F,CAC5G,CAAA;IACH,CAAC;SAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC;QACnC,qDAAqD;QACrD,sEAAsE;QACtE,6FAA6F;QAC7F,IAAI,KAAK,GAAG,IAAI,QAAQ,kBAAkB,EAAE,2CAA2C,EAAE,oEAAoE,CAAA;QAE7J,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;QACrD,IAAI,aAAa,CAAC,MAAM,EAAE,CAAC;YACzB,IACE,aAAa,CAAC,MAAM,KAAK,CAAC;gBAC1B,aAAa,CAAC,CAAC,CAAC,KAAK,wBAAwB,EAC7C,CAAC;gBACD,KAAK,IAAI,+FAA+F,EAAE,qFAAqF,EAAE,yCAAyC,QAAQ,KAAK,CAAA;YACzP,CAAC;iBAAM,CAAC;gBACN,MAAM,WAAW,GAAG,aAAa,CAAC,MAAM,CACtC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,wBAAwB,CAC1C,CAAA;gBACD,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC;oBACvB,KAAK,IAAI,gCAAgC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAA;gBACnE,CAAC;YACH,CAAC;QACH,CAAC;QAED,KAAK,GAAG,KAAK,GAAG,cAAc,CAAA;QAC9B,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;IACtB,CAAC;IAED,OAAO;QACL,OAAO;QACP,EAAE;QACF,IAAI;KACL,CAAA;AACH,CAAC","sourcesContent":["import {\n  INTERACTION_CONTAINER_ID,\n  MotiPressableInteractionIds,\n  useMotiPressableContext,\n} from './context'\n\ntype Id = MotiPressableInteractionIds['id']\n\ntype Deps = unknown[] | null | undefined\ntype Returns<Factory> = {\n  id: Id\n  factory: Factory\n  deps?: Deps\n}\n\ntype HookName =\n  | 'useMotiPressableAnimatedProps'\n  | 'useMotiPressable'\n  | 'useMotiPressableTransition'\n\nexport function useFactory<Factory extends (...props: any[]) => any>(\n  hookName: HookName,\n  factoryOrId: Factory | MotiPressableInteractionIds['id'],\n  maybeFactoryOrDeps?: Factory | Deps,\n  maybeDeps?: Deps\n): Returns<Factory> {\n  const context = useMotiPressableContext()\n  const missingIdError = `\n\nIf you're using a container ID, it should look like this:\n${hookName}(\"${factoryOrId}\", ({ pressed, hovered }) => {\n  'worklet'\n\n  return {\n    opacity: pressed ? 1 : 0\n  }\n})\n\nOtherwise, you could ignore the id and style relative to the closest parent pressable.\n\n${hookName}(({ pressed, hovered }) => {\n    'worklet'\n\n    return {\n      opacity: pressed ? 1 : 0\n    }\n  })\n  `\n\n  let factory: Factory\n  let id: Id = INTERACTION_CONTAINER_ID\n  let deps: Deps\n\n  if (typeof factoryOrId === 'function') {\n    factory = factoryOrId\n    deps = maybeFactoryOrDeps as Deps\n  } else if (typeof maybeFactoryOrDeps === 'function') {\n    id = factoryOrId\n    factory = maybeFactoryOrDeps\n    deps = maybeDeps\n  } else {\n    throw new Error(\n      `[${hookName}] Invalid arguments. If the first argument is a unique ID string, the second must be a worklet function. Alternatively, the first argument can be a function, without an ID argument. However, received ${factoryOrId} as first argument, and ${maybeFactoryOrDeps} as the second one.` +\n        missingIdError\n    )\n  }\n\n  if (!context) {\n    console.error(\n      `[${hookName}] Missing context. Are you sure this component is the child of a <MotiPressable /> component?`\n    )\n  } else if (!context.containers[id]) {\n    // this error will only happen if you set a unique ID\n    // why? because if there is indeed a context, and there's no unique ID\n    // ...then we fall back to the default INTERACTION_CONTAINER_ID, which exists if (context) {}\n    let error = `[${hookName}] Received id \"${id}\", but there isn't a <MotiPressable id=\"${id}\" /> component wrapping it. This will result in nothing happening.`\n\n    const containerKeys = Object.keys(context.containers)\n    if (containerKeys.length) {\n      if (\n        containerKeys.length === 1 &&\n        containerKeys[0] === INTERACTION_CONTAINER_ID\n      ) {\n        error += ` There is a <MotiPressable /> component as the parent of this hook, but it doesn't have id=\"${id}\" set as a prop. You should either add that prop to the parent <MotiPressable id=\"${id}\" />, or remove the first argument of ${hookName}().`\n      } else {\n        const possibleIds = containerKeys.filter(\n          (key) => key !== INTERACTION_CONTAINER_ID\n        )\n        if (possibleIds.length) {\n          error += ` Did you mean to use one of: ${possibleIds.join(', ')}`\n        }\n      }\n    }\n\n    error = error + missingIdError\n    console.error(error)\n  }\n\n  return {\n    factory,\n    id,\n    deps,\n  }\n}\n"]}