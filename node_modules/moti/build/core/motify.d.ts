import React, { ComponentType } from 'react';
import type { ImageStyle, TextStyle, ViewStyle } from 'react-native';
import { BaseAnimationBuilder, EntryExitAnimationFunction, LayoutAnimationFunction } from 'react-native-reanimated';
import type { MotiProps } from './types';
export default function motify<Props extends object, Ref, Animate = ViewStyle | ImageStyle | TextStyle>(ComponentWithoutAnimation: ComponentType<Props>): () => React.ForwardRefExoticComponent<React.PropsWithoutRef<Props & AnimatedProps<Props> & MotiProps<Animate, import("./types").StyleValueWithReplacedTransforms<Animate>, Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends infer T ? T extends (key extends object ? never : key) ? T extends any[] ? never : T : never : never]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>, Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends infer T_11 ? T_11 extends (key extends object ? never : key) ? T_11 extends any[] ? never : T_11 : never : never]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform> extends infer T_1 ? { [Key in keyof T_1]?: Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends infer T_2 ? T_2 extends (key extends object ? never : key) ? T_2 extends any[] ? never : T_2 : never : never]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>[Key] | {
    value: (Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends infer T_3 ? T_3 extends (key extends object ? never : key) ? T_3 extends any[] ? never : T_3 : never : never]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>[Key] extends infer T_4 ? T_4 extends Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends infer T_5 ? T_5 extends (key extends object ? never : key) ? T_5 extends any[] ? never : T_5 : never : never]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>[Key] ? T_4 extends any[] ? never : T_4 : never : never) extends infer T_6 ? T_6 extends (Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends infer T_7 ? T_7 extends (key extends object ? never : key) ? T_7 extends any[] ? never : T_7 : never : never]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>[Key] extends infer T_8 ? T_8 extends Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends infer T_9 ? T_9 extends (key extends object ? never : key) ? T_9 extends any[] ? never : T_9 : never : never]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>[Key] ? T_8 extends any[] ? never : T_8 : never : never) ? T_6 extends object ? never : T_6 : never : never;
    onDidAnimate: import("./types").InlineOnDidAnimate<Partial<{ [key in Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]: import("./types").StyleValueWithReplacedTransforms<Animate>[key] | import("./types").SequenceItem<import("./types").StyleValueWithReplacedTransforms<Animate>[(key extends object ? never : key) extends infer T_10 ? T_10 extends (key extends object ? never : key) ? T_10 extends any[] ? never : T_10 : never : never]>[]; } & { [key_1 in "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Extract<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">]?: (string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1] | import("./types").SequenceItem<(string & {}) | import("./types").StyleValueWithReplacedTransforms<Animate>[key_1]>[] | undefined; } & import("./types").StyleValueWithSequenceArraysWithTransform>[Key]>;
} | undefined; } : never> & {
    children?: React.ReactNode;
}> & React.RefAttributes<Ref>>;
type AnimatedProps<Props> = {
    animatedProps?: Partial<Props>;
    layout?: BaseAnimationBuilder | LayoutAnimationFunction | typeof BaseAnimationBuilder;
    entering?: BaseAnimationBuilder | typeof BaseAnimationBuilder | EntryExitAnimationFunction | Keyframe;
    exiting?: BaseAnimationBuilder | typeof BaseAnimationBuilder | EntryExitAnimationFunction | Keyframe;
};
export {};
//# sourceMappingURL=motify.d.ts.map